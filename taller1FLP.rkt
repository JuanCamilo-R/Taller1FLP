#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 122 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 72 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 71 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
224 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 3648 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53
#";;TALLER 1 -Fundamentos de lenguajes de programaci\303\263n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;Diego Fabi\303\241n Ledesma Motta   1928161-3743"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;Jos\303\251 David Barona            1727590-3743"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;Juan Camilo Randazzo         1923948-3743"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          97 21           0 0           0 15 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Sublista"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Contrato: lista -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"Procedimiento"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 6 #"cuenta"
0 0 17 3 39 #" la cantidad de sublistas de una lista."
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"sublistas"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sublistas"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"sublistas"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"sublistas"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sublistas"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 6 #"))))) "
0 0 17 3 22 #";Resultado esperado: 3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 9 #"sublistas"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 1 #"g"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"5"
0 0 24 3 3 #" (("
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 5 #")))) "
0 0 17 3 23 #";Resultado esperado: 10"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 4 #";;2."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; filtro :"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 85
(4
 #";; Procedimiento que apartir de un predicado pred y una lista lst, de"
 #"vuelve una lista"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(5
 #";; compuesta por los elementos de lst para los cuales pred devuelve #"
 #"t."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;Pruebas:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 17 3 29 #"; Resultado esperado: (3 4 5)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 17 3 27 #"; Resultado esperado; (c d)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filtro"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 17 3 34 #";Resultado esperado; ((1 2 a (b)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          67 21           0 0           0 10 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";inversion-listas"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";contrato: lista -> lista"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";prop\303\263sito: "
0 0 24 29 1 #"\n"
0 0 17 3 88
(6
 #";recibe una lista de 2-list y retorna la lista con cada uno de sus el"
 #"ementos invertidos."
) 0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"inversion-listas"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"append"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 5 #"))) ("
0 0 14 3 16 #"inversion-listas"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Pruebas:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 16 #"inversion-listas"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 2 #"es"
0 0 24 3 1 #" "
0 0 14 3 6 #"Racket"
0 0 24 3 3 #") ("
0 0 14 3 6 #"genial"
0 0 24 3 1 #" "
0 0 14 3 3 #"muy"
0 0 24 3 3 #") ("
0 0 21 3 2 #"21"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 5 #")))) "
0 0 17 3 56 #";Resultado esperado: '((Racket es) (muy genial) (20 21))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 2 #" ("
0 0 14 3 16 #"inversion-listas"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))))"
0 0 17 3 21 #";Resultado esperado: "
0 0 17 3 1 #"'"
0 0 17 3 2 #"(("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 3 #") ("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 3 #") ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 3 #") ("
0 0 17 3 1 #"c"
0 0 17 3 4 #" d))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          61 21           0 0           0 9 0 17 3 2 #";4"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";situar-en-lista"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Contrato: lista * numero * numero -> lista"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 107
(7
 #";Procedimiento que situa el tercer argumento en la lista proporcionad"
 #"a en la posicion del segundo elemento."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"situar-en-lista"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 15 #"situar-en-lista"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"h"
0 0 24 3 2 #" ("
0 0 14 3 15 #"situar-en-lista"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"Comienzo"
0 0 24 3 3 #")) "
0 0 17 3 48 #";Resultado esperado: '(Comienzo 2 3 4 5 6 7 8 9)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 15 #"situar-en-lista"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"Mitad"
0 0 24 3 3 #")) "
0 0 17 3 45 #";Resultado esperado: '(1 2 3 4 Mitad 6 7 8 9)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 15 #"situar-en-lista"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"Final"
0 0 24 3 3 #")) "
0 0 17 3 45 #";Resultado esperado: '(1 2 3 4 5 6 7 8 Final)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          85 21           0 0           0 13 0 17 3 4 #";;5."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;cambioPos :"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";:Primera funci\303\263n auxiliar cambioPos"
0 0 24 29 1 #"\n"
0 0 17 3 77
(8
 #";;Esta funci\xC3\xB3n recibe un n\xC3\xBAmero num y una lista lista, "
 #"y devuelve una lista"
) 0 0 24 29 1 #"\n"
0 0 17 3 51 #";;en la que se intercambi\303\263 el elemento de la lista"
0 0 24 29 1 #"\n"
0 0 17 3 64
(9
 #";;en la posici\xC3\xB3n num con el elemento en la posici\xC3\xB3n (nu"
 #"m + 1)."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cambioPos"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 9 #"cambioPos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 7 #"))  )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cambioPos"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")))"
0 0 17 3 36 #";Resultado esperado: (0 1 3 2 4 5 6)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cambioPos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 17 3 34 #";Resultado esperado: ('a 'b 'c 'd)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cambioPos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 17 3 32 #";Resultado esperado: (e' 4 e' 5)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         265 21           0 0           0 43 0 17 3 4 #";;5."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;todoListo? :"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;Segunda funci\303\263n auxiliar todoListo?"
0 0 24 29 1 #"\n"
0 0 17 3 72
(10
 #";;Esta funci\xC3\xB3n verifica si la lista recibida ya est\xC3\xA1 or"
 #"denada en orden"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
(11
 #";;ascendente o descendente, seg\xC3\xBAn la operaci\xC3\xB3n especifi"
 #"caada."
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";;todoListo? recibe tres par\303\241metros:"
0 0 24 29 1 #"\n"
0 0 17 3 77
(12
 #";;1. posicion es la posici\xC3\xB3n del elemento de la lista desde do"
 #"nde comenzar\xC3\xA1"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;a compara cada elemento de la lista con el elemento siguiente,"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";;si"
0 0 17 3 1 #" "
0 0 17 3 4 #"este"
0 0 17 3 1 #" "
0 0 17 3 5 #"valor"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 8 #"distinto"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 26 #"cero al momento de invocar"
0 0 24 29 1 #"\n"
0 0 17 3 53
(13
 #";;la funci\xC3\xB3n, \xC3\xA9sta no recorrer\xC3\xA1 la lista complet"
 #"a."
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(14
 #";;2. pred es la funci\xC3\xB3n que usar\xC3\xA1 para comparar los ele"
 #"mentos dos a dos."
) 0 0 24 29 1 #"\n"
0 0 17 3 62
#";;3. lista es la lista que va a verificarse si est\303\241 ordenada."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 70
(15
 #";;Si la lista est\xC3\xA1 totalmente ordenada, todoListo? retorna \""
 #"\xC2\xA1Lista!\""
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(16
 #";;de lo contrario retorna la posici\xC3\xB3n previa al primer n\xC3"
 #"\xBAmero desordenado."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 19 3 10 #"\"\302\241Lista!\""
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 8 #"posicion"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 8 #"posicion"
0 0 24 3 5 #"))  )"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 17 3 33 #";Resultado esperado: (\"\302\241Lista!\")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"o"
0 0 24 3 2 #" ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 17 3 22 #";Resultado esperado: 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 2 #" ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 1 #" "
0 0 21 3 2 #"16"
0 0 24 3 1 #" "
0 0 21 3 2 #"35"
0 0 24 3 1 #" "
0 0 21 3 2 #"50"
0 0 24 3 1 #" "
0 0 21 3 2 #"24"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 3 #")))"
0 0 17 3 22 #";Resultado esperado: 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 4 #";;5."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;ordenar:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(17
 #";;La funci\xC3\xB3n ordenar recibe una operaci\xC3\xB3n pred que pued"
 #"e ser < \xC3\xB3 >,"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(18
 #";;y una lista de n\xC3\xBAmeros lst-num, la cual devuelve ordenada se"
 #"g\xC3\xBAn el operador"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;ingresado, con ayuda de las funciones todoListo? y cambioPos. "
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ordenar"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 7 #"lst-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"lst-num"
0 0 24 3 2 #") "
0 0 14 3 7 #"lst-num"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 7 #"lst-num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"ordenar"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 9 #"cambioPos"
0 0 24 3 2 #" ("
0 0 14 3 10 #"todoListo?"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 7 #"lst-num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 14 3 7 #"lst-num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 7 #"lst-num"
0 0 24 3 5 #")))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"q"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ordenar"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"58"
0 0 24 3 1 #" "
0 0 21 3 2 #"41"
0 0 24 3 1 #" "
0 0 21 3 2 #"67"
0 0 24 3 1 #" "
0 0 21 3 2 #"54"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 17 3 40 #";Resultado esperado: (10 32 41 54 58 67)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ordenar"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"58"
0 0 24 3 1 #" "
0 0 21 3 2 #"41"
0 0 24 3 1 #" "
0 0 21 3 2 #"67"
0 0 24 3 1 #" "
0 0 21 3 2 #"54"
0 0 24 3 1 #" "
0 0 21 3 2 #"32"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")))"
0 0 17 3 40 #";Resultado esperado: (67 58 54 41 32 10)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ordenar"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 3 #")))"
0 0 17 3 42 #";Resultado esperado: (9 8 7 6 5 4 3 2 1 0)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";6"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";indice-lista"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";contrato: predicado,lista -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 82
(19
 #";recibe un predicado y una lista, retorna el indice del primer elemen"
 #"to que cumple"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";el predicado en la lista."
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"indice-lista"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"predicado"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 17 3 20 #";zona de declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 7 #"funcion"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"predicado"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 9 #"predicado"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 21 3 1 #"0"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 9 #"predicado"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 19 #";zona de ejecuci\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 9 #"predicado"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 2 #" ("
0 0 14 3 12 #"indice-lista"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"g"
0 0 24 3 4 #"))) "
0 0 17 3 22 #";Resultado esperado: 3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"u"
0 0 24 3 2 #" ("
0 0 14 3 12 #"indice-lista"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"))) "
0 0 17 3 22 #";Resultado esperado: 4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";7"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";contar-ocurrencias-s-exp"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";Contrato: elemento (simbolo) * s-exp -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 86
(20
 #";Procedimiento que recibe una s-exp y verifica si la s-exp es un simb"
 #"olo para despu\xC3\xA9s"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(21
 #";verificar si es igual al elemento recibido, si lo es devuelve 1, si "
 #"no, devuelve 0"
) 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"contar-ocurrencias-s-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 18 #"contar-ocurrencias"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 9          55 21           0 0           0 8 0 24 29 1 #"\n"
0 0 17 3 19 #";contar-ocurrencias"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";Contrato: simbolo * s-lista -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 118
(22
 #";Procedimiento que cuenta las ocurrencias de una variable representad"
 #"a como un simbolo en la entrada del procedimiento"
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"contar-ocurrencias"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 24 #"contar-ocurrencias-s-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-lst"
0 0 24 3 4 #")) ("
0 0 14 3 18 #"contar-ocurrencias"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-lst"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 18 #"contar-ocurrencias"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 4 #" ((("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))))) "
0 0 17 3 22 #";Resultado esperado: 3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 2 #" ("
0 0 14 3 18 #"contar-ocurrencias"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 4 #" ((("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #") () "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))))) "
0 0 17 3 22 #";Resultado esperado: 3"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 18 #"contar-ocurrencias"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 4 #" ((("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #") "
0 0 14 3 1 #"x"
0 0 24 3 6 #"))))) "
0 0 17 3 22 #";Resultado esperado: 0"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         907 21           0 0           0 150 0 17 3 2 #";8"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";Intercambio-s-exp"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"Contrato:"
0 0 17 3 1 #" "
0 0 17 3 7 #"simbolo"
0 0 17 3 1 #" "
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 7 #"simbolo"
0 0 17 3 1 #" "
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 2 #"->"
0 0 17 3 8 #" simbolo"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"Esta"
0 0 17 3 1 #" "
0 0 17 3 8 #"funci\303\263n"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 3 #"muy"
0 0 17 3 1 #" "
0 0 17 3 8 #"parecida"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 26 #" contar-ocurrencias-s-exp."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"A"
0 0 17 3 1 #" "
0 0 17 3 10 #"diferencia"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 7 #"aquella"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 4 #"esta"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 3 #"vez"
0 0 17 3 1 #" "
0 0 17 3 4 #"haya"
0 0 17 3 1 #" "
0 0 17 3 10 #"verificado"
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 8 #"simbolo,"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"pregunta"
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 5 #"igual"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"elem1"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 4 #"as\303\255"
0 0 17 3 1 #" "
0 0 17 3 8 #"devuelve"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 5 #"elem2"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 5 #"igual"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"elem2,"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"devuelve"
0 0 17 3 1 #" "
0 0 17 3 6 #"elem1."
0 0 17 3 1 #" "
0 0 17 3 2 #"Si"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 7 #"ninguno"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 1 #" "
0 0 17 3 5 #"casos"
0 0 17 3 1 #" "
0 0 17 3 8 #"devuelve"
0 0 17 3 1 #" "
0 0 17 3 6 #"s-exp."
0 0 17 3 1 #" "
0 0 17 3 2 #"Si"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 8 #"s\303\255mbolo"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 5 #"llama"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 11 #"intercambio"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 6 #" s-exp"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"intercambio-s-exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"elem1"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem1"
0 0 24 3 2 #") "
0 0 14 3 5 #"elem2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 24 3 2 #") "
0 0 14 3 5 #"elem1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"intercambio"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem1"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 9          67 21           0 0           0 10 0 24 29 1 #"\n"
0 0 17 3 14 #";;intercambio:"
0 0 24 29 1 #"\n"
0 0 17 3 87
(23
 #";;Esta funci\xC3\xB3n recibe tres argumentos: dos elementos elem1 y e"
 #"lem2, y una lista S-list"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";;intercambio revisa elemento a elemento de S-list si hay"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";;ocurrencias de elem1 o elem2 para intercambiarlos. En caso"
0 0 24 29 1 #"\n"
0 0 17 3 65
(24
 #";;de encontrar una sublista, se aplica la funci\xC3\xB3n a la sublist"
 #"a."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"intercambio"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"elem1"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 17 #"intercambio-s-exp"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem1"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"intercambio"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem1"
0 0 24 3 1 #" "
0 0 14 3 5 #"elem2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 11 #"intercambio"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 17 3 30 #";Resultado esperado: (d b c a)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 11 #"intercambio"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #" () "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 3 #")))"
0 0 17 3 33 #";Resultado esperado: (d a () c a)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"aa"
0 0 24 3 2 #" ("
0 0 14 3 11 #"intercambio"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 1 #"x"
0 0 24 3 2 #") "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 17 3 36 #";Resultado esperado: ((y) x (z (y)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 2 #";9"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";producto"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";contrato: lista,lista -> lista"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 81
(25
 #";recibe dos listas y retorna una lista de listas 2-list representando"
 #" el producto"
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";cartesiano de las dos listas."
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"producto"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 21 #";zona de declaraci\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"aux"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #")"
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"two-list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 3 2 #")("
0 0 14 3 3 #"aux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 20 #";zona de declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"aux"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 9          85 21           0 0           0 13 0 17 3 11 #";9-Auxiliar"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";two-list"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";contrato: s\303\255mbolo, lista -> lista"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 68
(26
 #";Construye 2-list recibiendo como par\xC3\xA1metro un elemento y una "
 #"lista"
) 0 0 24 29 1 #"\n"
0 0 17 3 65
#";luego hace producto cartesiano con el elemento y cada uno de los"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";elementos de la lista."
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"two-list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 5 #"))) ("
0 0 14 3 8 #"two-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #"))"
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ab"
0 0 24 3 2 #" ("
0 0 14 3 8 #"producto"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))) "
0 0 17 3 59
#";Resultado esperado: '((a x) (a y) (b x) (b y) (c x) (c y))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ac"
0 0 24 3 2 #" ("
0 0 14 3 8 #"producto"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #" "
0 0 14 3 1 #"w"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 17 3 29 #";Resultado esperado: '((a x)("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"y)("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"z)("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"w)("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"v)("
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 3 #"x) "
0 0 17 3 3 #"y)("
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 3 #"z)("
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 3 #"w)("
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 3 #"v)("
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 3 #"x)("
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 3 #"y)("
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 3 #"z)("
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 3 #"w)("
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 3 #"v)("
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 3 #"x)("
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 3 #"y)("
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 3 #"z)("
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 3 #"w)("
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 3 #"v)("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 3 #"x)("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 3 #"y)("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 3 #"z)("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 3 #"w)("
0 0 17 3 1 #"e"
0 0 17 3 1 #" "
0 0 17 3 3 #"v)("
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 3 #"x)("
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 3 #"y)("
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 3 #"z)("
0 0 17 3 10 #"f w)(f v))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 3 #";10"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";generarLista"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";Contrato: numero * numero -> lista."
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 95
(27
 #";Procedimiento que recibe dos numeros y genera una lista empezando co"
 #"n un elemento siendo igual"
) 0 0 24 29 1 #"\n"
0 0 17 3 101
(28
 #";al primer argumento y aumentando en una unidad, finaliza con un elem"
 #"ento igual al segundo argumento."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"generarLista"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generarLista"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 2 #") "
0 0 14 3 3 #"fin"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 19 3 3 #"\"el"
0 0 19 3 1 #" "
0 0 19 3 7 #"segundo"
0 0 19 3 1 #" "
0 0 19 3 9 #"argumento"
0 0 19 3 1 #" "
0 0 19 3 4 #"debe"
0 0 19 3 1 #" "
0 0 19 3 3 #"ser"
0 0 19 3 1 #" "
0 0 19 3 21 #"mayor que el primero\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ad"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generarLista"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 17 3 32 #";Resultado esperado '(1 2 3 4 5)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ae"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generarLista"
0 0 24 3 1 #" "
0 0 21 3 2 #"-5"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 3 #")) "
0 0 17 3 34 #";Resultado esperado '(-5 -4 -3 -2)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          61 21           0 0           0 9 0 17 3 12 #";filter-acum"
0 0 24 29 1 #"\n"
0 0 17 3 93
(29
 #";Contrato: numero * numero * procedimiento binario * valor inicial * "
 #"funcion unaria -> numero"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 98
(30
 #";Procedimiento que aplica el procedimiento binario a todos los elemen"
 #"tos que esten en el intervalo"
) 0 0 24 29 1 #"\n"
0 0 17 3 108
(31
 #";de los primeros dos argumentos y que a su vez estos elementos cumpla"
 #"n con el predicado de la funcion unaria"
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"filter-acum"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"acum"
0 0 24 3 1 #" "
0 0 14 3 4 #"filt"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"lst"
0 0 24 3 2 #" ("
0 0 14 3 12 #"generarLista"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"filter"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"acum"
0 0 24 3 1 #" "
0 0 14 3 4 #"filt"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"acum"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"filt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"acum"
0 0 24 3 1 #" "
0 0 14 3 4 #"filt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #"  "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"acum"
0 0 24 3 1 #" "
0 0 14 3 4 #"filt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"acum"
0 0 24 3 1 #" "
0 0 14 3 4 #"filt"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"af"
0 0 24 3 2 #" ("
0 0 14 3 11 #"filter-acum"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 4 #"odd?"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Resultado esperado 25"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ag"
0 0 24 3 2 #" ("
0 0 14 3 11 #"filter-acum"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 5 #"even?"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Resultado esperado 30"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          61 21           0 0           0 9 0 17 3 5 #";;11."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;list-append:"
0 0 24 29 1 #"\n"
0 0 17 3 74
(32
 #";;Recibe dos listas lst1 y lst2, y devuelve una lista con los element"
 #"os de"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";;lst2 a\303\261adidos a los de lst1. "
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-append"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 11 #"list-append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 2 #") "
0 0 14 3 5 #"list2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ah"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-append"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #")))"
0 0 17 3 32 #";Resultado esperado: (1 2 3 4 5)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ai"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-append"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 4 #" () "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 6 #"((()) "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 17 3 37 #";Resultado esperado: ('a () c (()) e)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"aj"
0 0 24 3 2 #" ("
0 0 14 3 11 #"list-append"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"h"
0 0 24 3 3 #")))"
0 0 17 3 32 #";Resultado esperado: (u f c j h)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          85 21           0 0           0 13 0 17 3 3 #";12"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";operate"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";contrato: lista, lista -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";recibe dos listas, una de operaciones y otra de enteros."
0 0 24 29 1 #"\n"
0 0 17 3 58
#";La funci\303\263n retorna el resultado de aplicar sucesivamente"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";las operaciones en la lista 1 a los valores en la lista 2"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"operate"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lrators"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"letrec"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 21 #";zona de declaraci\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"operacion"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lrators"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 1 #" "
0 0 14 3 9 #"resultado"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 9 #"resultado"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"operacion"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"lrators"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 3 #") ("
0 0 14 3 7 #"ejemplo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"lrators"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"lrators"
0 0 24 3 1 #")"
0 0 14 3 9 #"resultado"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"operacion"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"lrators"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 3 #") ("
0 0 14 3 7 #"ejemplo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"lrators"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"resultado"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              )"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 20 #";zona de declaracion"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"operacion"
0 0 24 3 1 #" "
0 0 14 3 7 #"lrators"
0 0 24 3 1 #" "
0 0 14 3 6 #"lrands"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 14
#";12 (auxiliar)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";operate"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";contrato: simbolo,lista -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 77
(33
 #";recibe un operador y una two-list, retorna el resultado de la operac"
 #"i\xC3\xB3n con"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";los 2 elementos de la lista"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";funci\303\263n auxiliar"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"ejemplo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"operador"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"operador"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";pruebas:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ak"
0 0 24 3 2 #" ("
0 0 14 3 7 #"operate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"))) "
0 0 17 3 24 #";Resultado esperado: 102"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"al"
0 0 24 3 2 #" ("
0 0 14 3 7 #"operate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";Resultado esperado: 20"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          73 21           0 0           0 11 0 17 3 3 #";13"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";zip"
0 0 24 29 1 #"\n"
0 0 17 3 79
(34
 #";Contrato: funcion binaria (que espera dos argumentos) * lista * list"
 #"a -> lista"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 87
(35
 #";Procedimiento que retorna una lista donde la posicion n-esima corres"
 #"ponde al resultado"
) 0 0 24 29 1 #"\n"
0 0 17 3 103
(36
 #";de aplicar la funcion binaria sobre los elementos en la posicion n-e"
 #"sima en las dos listas de entrada."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"zip"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"zip"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"am"
0 0 24 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 4 #"))) "
0 0 17 3 26 #";Resultado esperado '(7 6)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"an"
0 0 24 3 2 #" ("
0 0 14 3 3 #"zip"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"11"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 4 #"))) "
0 0 17 3 32 #";Resultado esperado '(110 45 48)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          85 21           0 0           0 13 0 17 3 5 #";;14."
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;Presente?:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;Funci\303\263n auxiliar de path."
0 0 24 29 1 #"\n"
0 0 17 3 80
(37
 #";;Recibe una lista lista y un elemento elem. Si el elemento est\xC3"
 #"\xA1 presente en la"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(38
 #";;lista recibida, o en alguna de sus sublistas, la funci\xC3\xB3n ret"
 #"orna #t, de lo"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";;contrario retorna #f."
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"presente?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 9 #"presente?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 3 #") ("
0 0 14 3 9 #"presente?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"presente?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ao"
0 0 24 3 2 #" ("
0 0 14 3 9 #"presente?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ap"
0 0 24 3 2 #" ("
0 0 14 3 9 #"presente?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 5 #" (() "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"aq"
0 0 24 3 2 #" ("
0 0 14 3 9 #"presente?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 5 #" (() "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 2 #"12"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 17 3 23 #";Resultado esperado: #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          85 21           0 0           0 13 0 17 3 4 #";;14"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;path:"
0 0 24 29 1 #"\n"
0 0 17 3 85
(39
 #";;Recibe un n\xC3\xBAmero n y un \xC3\xA1rbol binario de b\xC3\xBAsqu"
 #"eda BST que contiene el n\xC3\xBAmero n."
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(40
 #";;La funci\xC3\xB3n retorna una lista con la ruta a tomar (iniciando "
 #"desde el nodo"
) 0 0 24 29 1 #"\n"
0 0 17 3 82
(41
 #";;ra\xC3\xADz del \xC3\xA1rbol), indicada por cadenas left y right, h"
 #"asta llegar al n\xC3\xBAmero n."
) 0 0 24 29 1 #"\n"
0 0 17 3 68
(42
 #";;Si n se encuentra en el nodo ra\xC3\xADz, path retorna una lista va"
 #"c\xC3\xADa."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"BTS"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"BTS"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"presente?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"BTS"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"BTS"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"right"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"BTS"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ar"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 21 3 2 #"17"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"12"
0 0 24 3 8 #" () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 2 #"26"
0 0 24 3 2 #" ("
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 21 3 2 #"17"
0 0 24 3 11 #" () ()) ())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 2 #"31"
0 0 24 3 19 #" () ())        ))))"
0 0 17 3 38 #";Resultado esperado: (right left left)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"as"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"12"
0 0 24 3 8 #" () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 2 #"26"
0 0 24 3 2 #" ("
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 21 3 2 #"17"
0 0 24 3 11 #" () ()) ())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 2 #"31"
0 0 24 3 19 #" () ())        ))))"
0 0 17 3 23 #";Resultado esperado: ()"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"at"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 1 #"7"
0 0 24 3 5 #" () ("
0 0 21 3 2 #"12"
0 0 24 3 8 #" () ()))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 21 3 2 #"26"
0 0 24 3 2 #" ("
0 0 21 3 2 #"20"
0 0 24 3 2 #" ("
0 0 21 3 2 #"17"
0 0 24 3 11 #" () ()) ())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 21 3 2 #"31"
0 0 24 3 19 #" () ())        ))))"
0 0 17 3 34 #";Resultado esperado: (right right)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"au"
0 0 24 3 2 #" ("
0 0 14 3 4 #"path"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"8"
0 0 24 3 2 #" ("
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 21 3 1 #"6"
0 0 24 3 2 #" ("
0 0 21 3 1 #"4"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 21 3 1 #"7"
0 0 24 3 10 #" () ()) ))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"10"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 21 3 2 #"14"
0 0 24 3 2 #" ("
0 0 21 3 2 #"13"
0 0 24 3 7 #" () ())"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"            ()            )))))"
0 0 17 3 38 #";Resultado esperado: (left right left)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          85 21           0 0           0 13 0 17 3 3 #";15"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";compose"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";contrato: procedimiento, procedimiento -> procedimiento"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";recibe dos argumentos"
0 0 24 29 1 #"\n"
0 0 17 3 70
(43
 #";proc1 y proc2 que son prodecimientos de un argumento, y un valor val"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 68
#";retorna la composicion de ambos procedimientos aplicados sobre val."
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"compose"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"proc1"
0 0 24 3 1 #" "
0 0 14 3 5 #"proc2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"proc1"
0 0 24 3 2 #" ("
0 0 14 3 5 #"proc2"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";pruebas:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"av"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #")))"
0 0 17 3 22 #";Resultado esperado: b"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"aw"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #"))) "
0 0 17 3 22 #";Resultado esperado:#f"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ax"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ay"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 1 #" "
0 0 14 3 5 #"even?"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"az"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ba"
0 0 24 3 3 #" (("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"compose"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 4 #"))) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         595 21           0 0           0 98 0 17 3 4 #";16."
0 0 24 29 1 #"\n"
0 0 17 3 15 #";present-s-exp?"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"Contrato:"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 7 #"simbolo"
0 0 17 3 1 #" "
0 0 17 3 2 #"->"
0 0 17 3 9 #" booleano"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Prop\303\263sito:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"Funci\303\263n"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 8 #"pregunta"
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 8 #"simbolo."
0 0 17 3 1 #" "
0 0 17 3 2 #"Si"
0 0 17 3 1 #" "
0 0 17 3 2 #"lo"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 8 #"pregunta"
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 5 #"s-exp"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 5 #"igual"
0 0 17 3 1 #" "
0 0 17 3 2 #"al"
0 0 17 3 1 #" "
0 0 17 3 7 #"simbolo"
0 0 17 3 6 #" elem."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #"Si"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 5 #"igual"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 7 #"retorna"
0 0 17 3 1 #" "
0 0 17 3 2 #"#t"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"si"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 3 #"#f."
0 0 17 3 1 #" "
0 0 17 3 2 #"Si"
0 0 17 3 1 #" "
0 0 17 3 2 #"no"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 2 #"un"
0 0 17 3 1 #" "
0 0 17 3 7 #"simbolo"
0 0 17 3 1 #" "
0 0 17 3 5 #"llama"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 8 #"present?"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 7 #" s-exp."
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"present-s-exp?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"present?"
0 0 24 3 1 #" "
0 0 14 3 5 #"s-exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 9          55 21           0 0           0 8 0 24 29 1 #"\n"
0 0 17 3 9 #";present?"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";Contrato: s-lst * elemento (simbolo) -> booleano."
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 80
(44
 #";Procedimiento que retorna #t si el elemento esta en la lista, retorn"
 #"a #f si no."
) 0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"present?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"present-s-exp?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 3 #") ("
0 0 14 3 8 #"present?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    )  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bb"
0 0 24 3 2 #" ("
0 0 14 3 8 #"present?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 1 #"u"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 3 #") ("
0 0 14 3 1 #"j"
0 0 24 3 3 #" (("
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 6 #"))))) "
0 0 21 3 1 #"'"
0 0 14 3 1 #"m"
0 0 24 3 3 #")) "
0 0 17 3 23 #";Resultado esperado: #t"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"present?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 1 #"h"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 1 #"t"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 2 #" ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #") ("
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 14 3 1 #"k"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"'"
0 0 14 3 1 #"z"
0 0 24 3 3 #")) "
0 0 17 3 22 #";Resultado esperado #f"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          91 21           0 0           0 14 0 17 3 7 #";carCdr"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";Contrato: elemento (simbolo) * s-list"
0 0 17 3 27 #" * simbolo u sring -> lista"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Proposito:"
0 0 24 29 1 #"\n"
0 0 17 3 88
(45
 #";Procedimiento que retorna una expresion que cuando se evalua, produc"
 #"e el codigo para un"
) 0 0 24 29 1 #"\n"
0 0 17 3 107
(46
 #";procedimiento que toma una lista con la misma estructura que la list"
 #"a de entrada y devuelve el valor en la"
) 0 0 24 29 1 #"\n"
0 0 17 3 131
(47
 #";misma posicion en la primera aparicion del elemento de entrada. Si e"
 #"l elemento no existe en la lista, retorne el tercer argumento."
) 0 0 24 29 1 #"\n"
0 0 17 3 48 #";Haga que genere composiciones de procedimiento."
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"carCdr"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"elem"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 8 #"errvalue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"present?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 3 #"car"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"present?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 4 #"elem"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compose"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 8 #"errvalue"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compose"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 8 #"errvalue"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"compose"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"elem"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 8 #"errvalue"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 8 #"errvalue"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Pruebas."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bd"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")) "
0 0 17 3 24 #";Resultado esperado: car"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"be"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")) "
0 0 17 3 52 #";Resultado esperado: (compose (compose car cdr) cdr)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bf"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dog"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"cat"
0 0 24 3 1 #" "
0 0 14 3 4 #"lion"
0 0 24 3 2 #" ("
0 0 14 3 4 #"fish"
0 0 24 3 1 #" "
0 0 14 3 3 #"dog"
0 0 24 3 5 #" ()) "
0 0 14 3 3 #"pig"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")) "
0 0 17 3 31 #";Resultado esperado: (compose ("
0 0 17 3 7 #"compose"
0 0 17 3 2 #" ("
0 0 17 3 7 #"compose"
0 0 17 3 2 #" ("
0 0 17 3 7 #"compose"
0 0 17 3 1 #" "
0 0 17 3 23 #"car cdr) car) cdr) cdr)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dog"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 4 #"fish"
0 0 24 3 1 #" "
0 0 14 3 3 #"dog"
0 0 24 3 5 #" ()) "
0 0 14 3 3 #"dog"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")) "
0 0 17 3 52 #";Resultado esperado: (compose (compose car cdr) car)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bh"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dog"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 3 #"dog"
0 0 24 3 2 #") "
0 0 14 3 4 #"fish"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")) "
0 0 17 3 38 #";Resultado esperado: (compose car car)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bi"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"dog"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"whale"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cat"
0 0 24 3 4 #") (("
0 0 14 3 5 #"mouse"
0 0 24 3 3 #" (("
0 0 14 3 3 #"dog"
0 0 24 3 2 #") "
0 0 14 3 5 #"snake"
0 0 24 3 2 #") "
0 0 14 3 4 #"fish"
0 0 24 3 2 #") "
0 0 14 3 3 #"cow"
0 0 24 3 3 #") ("
0 0 14 3 3 #"dog"
0 0 24 3 1 #" "
0 0 14 3 4 #"fish"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 9         121 21           0 0           0 19 0 17 3 20
#";Resultado esperado:"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";(compose"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; (compose"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (compose"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";   (compose"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";    (compose (compose (compose car car) car) cdr)"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";    car)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";   car)"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";  cdr)"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; cdr)"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"bj"
0 0 24 3 2 #" ("
0 0 14 3 6 #"carCdr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 14 3 4 #"fail"
0 0 24 3 3 #")) "
0 0 17 3 26 #";Resultado esperado: fail."
0 0 24 29 1 #"\n"
0           0
